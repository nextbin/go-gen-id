// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gen.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenIdRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenIdRequest) Reset()         { *m = GenIdRequest{} }
func (m *GenIdRequest) String() string { return proto.CompactTextString(m) }
func (*GenIdRequest) ProtoMessage()    {}
func (*GenIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce21d2510d3ac9c9, []int{0}
}

func (m *GenIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenIdRequest.Unmarshal(m, b)
}
func (m *GenIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenIdRequest.Marshal(b, m, deterministic)
}
func (m *GenIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenIdRequest.Merge(m, src)
}
func (m *GenIdRequest) XXX_Size() int {
	return xxx_messageInfo_GenIdRequest.Size(m)
}
func (m *GenIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenIdRequest proto.InternalMessageInfo

type GenIdResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenIdResponse) Reset()         { *m = GenIdResponse{} }
func (m *GenIdResponse) String() string { return proto.CompactTextString(m) }
func (*GenIdResponse) ProtoMessage()    {}
func (*GenIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce21d2510d3ac9c9, []int{1}
}

func (m *GenIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenIdResponse.Unmarshal(m, b)
}
func (m *GenIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenIdResponse.Marshal(b, m, deterministic)
}
func (m *GenIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenIdResponse.Merge(m, src)
}
func (m *GenIdResponse) XXX_Size() int {
	return xxx_messageInfo_GenIdResponse.Size(m)
}
func (m *GenIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenIdResponse proto.InternalMessageInfo

func (m *GenIdResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GenIdResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*GenIdRequest)(nil), "pb.GenIdRequest")
	proto.RegisterType((*GenIdResponse)(nil), "pb.GenIdResponse")
}

func init() { proto.RegisterFile("gen.proto", fileDescriptor_ce21d2510d3ac9c9) }

var fileDescriptor_ce21d2510d3ac9c9 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4f, 0xcd, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xe2, 0xe3, 0xe2, 0x71, 0x4f, 0xcd,
	0xf3, 0x4c, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x32, 0xe6, 0xe2, 0x85, 0xf2, 0x8b,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x58, 0x83, 0xc0, 0x6c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x26, 0x05, 0x46,
	0x0d, 0xe6, 0x20, 0xa6, 0xcc, 0x14, 0x23, 0x53, 0x2e, 0x66, 0xf7, 0xd4, 0x3c, 0x21, 0x3d, 0x2e,
	0x56, 0xb0, 0x5e, 0x21, 0x01, 0xbd, 0x82, 0x24, 0x3d, 0x64, 0x63, 0xa5, 0x04, 0x91, 0x44, 0x20,
	0x06, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x9d, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xad, 0xe0,
	0x7b, 0x85, 0x93, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenClient is the client API for Gen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenClient interface {
	GenId(ctx context.Context, in *GenIdRequest, opts ...grpc.CallOption) (*GenIdResponse, error)
}

type genClient struct {
	cc *grpc.ClientConn
}

func NewGenClient(cc *grpc.ClientConn) GenClient {
	return &genClient{cc}
}

func (c *genClient) GenId(ctx context.Context, in *GenIdRequest, opts ...grpc.CallOption) (*GenIdResponse, error) {
	out := new(GenIdResponse)
	err := c.cc.Invoke(ctx, "/pb.Gen/GenId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenServer is the server API for Gen service.
type GenServer interface {
	GenId(context.Context, *GenIdRequest) (*GenIdResponse, error)
}

// UnimplementedGenServer can be embedded to have forward compatible implementations.
type UnimplementedGenServer struct {
}

func (*UnimplementedGenServer) GenId(ctx context.Context, req *GenIdRequest) (*GenIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenId not implemented")
}

func RegisterGenServer(s *grpc.Server, srv GenServer) {
	s.RegisterService(&_Gen_serviceDesc, srv)
}

func _Gen_GenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenServer).GenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gen/GenId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenServer).GenId(ctx, req.(*GenIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gen",
	HandlerType: (*GenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenId",
			Handler:    _Gen_GenId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gen.proto",
}
